var calcSpeed, random, randomInteger;

calcSpeed = function(speed) {
  return (speed * delta) * (60 / 1000);
};

random = function(min, max) {
  if (min === void 0) {
    min = 0;
    max = 1;
  } else if (max === void 0) {
    max = min;
    min = 0;
  }
  return (Math.random() * (max - min)) + min;
};

randomInteger = function(min, max) {
  if (max === void 0) {
    max = min;
    min = 0;
  }
  return Math.floor(Math.random() * (max + 1 - min)) + min;
};

var AnimationLoopHelper;

AnimationLoopHelper = (function() {
  function AnimationLoopHelper() {
    this.animationLoopId = null;
    this.delta = 0;
    this.fps = 0;
    this.lastTime = 0;
    return this;
  }

  AnimationLoopHelper.prototype.correctValue = function(value) {
    return (value * this.delta) * (60 / 1000);
  };

  AnimationLoopHelper.prototype.start = function() {
    this.frame();
    return this;
  };

  AnimationLoopHelper.prototype.stop = function() {
    window.cancelAnimationFrame(this.animationLoopId);
    return this;
  };

  AnimationLoopHelper.prototype.frame = function(now) {
    this.delta = now - this.lastTime;
    this.fps = Math.round(1000 / this.delta);
    this.lastTime = now;
    App.update(this.delta);
    this.animationLoopId = window.requestAnimationFrame((function(_this) {
      return function(now) {
        _this.frame(now);
      };
    })(this));
    return this;
  };

  return AnimationLoopHelper;

})();

var CanvasHelper;

CanvasHelper = (function() {
  function CanvasHelper() {
    this.createCanvas();
    return this;
  }

  CanvasHelper.prototype.clear = function() {
    this.context.clearRect(0, 0, this.element.width, this.element.height);
    return this;
  };

  CanvasHelper.prototype.createCanvas = function() {
    this.element = document.createElement('canvas');
    this.element.height = document.body.clientHeight;
    this.element.width = document.body.clientWidth;
    document.body.appendChild(this.element);
    this.element.realHeight = this.element.height;
    this.element.realWidth = this.element.width;
    this.context = this.element.getContext('2d');
    this.context.globalCompositeOperation = 'destination-atop';
    this.scaleCanvas();
    return this;
  };

  CanvasHelper.prototype.scaleCanvas = function() {
    var backingStoreRatio, devicePixelRatio, oldHeight, oldWidth, ratio;
    backingStoreRatio = this.context.webkitBackingStorePixelRatio || this.context.backingStorePixelRatio || 1;
    devicePixelRatio = window.devicePixelRatio || 1;
    if (devicePixelRatio !== backingStoreRatio) {
      ratio = devicePixelRatio / backingStoreRatio;
      oldWidth = this.element.width;
      oldHeight = this.element.height;
      this.element.width = oldWidth * ratio;
      this.element.height = oldHeight * ratio;
      this.element.style.width = oldWidth + "px";
      this.element.style.height = oldHeight + "px";
      this.context.scale(ratio, ratio);
    }
    return this;
  };

  return CanvasHelper;

})();

var Ball;

Ball = (function() {
  function Ball() {
    var self, velocityMax, velocityMin;
    self = this;
    this.color = 'rgb(240, 240, 240)';
    this.size = baseSize;
    this.half = this.size / 2;
    this.position = {
      x: (canvas.width / 2) - this.half,
      y: (canvas.height / 2) - this.half
    };
    velocityMin = -15;
    velocityMax = 15;
    this.velocity = {
      x: (Math.random() * (velocityMax - velocityMin)) + velocityMin,
      y: (Math.random() * (velocityMax - velocityMin)) + velocityMin
    };
    this.correctVelocity();
    this;
  }

  Ball.prototype.correctVelocity = function() {
    var speedThreshold;
    speedThreshold = 5;
    if (this.velocity.x < 0) {
      this.directionX = 'left';
      if (this.velocity.x > -speedThreshold) {
        this.velocity.x = -speedThreshold;
      }
    } else {
      this.directionX = 'right';
      if (this.velocity.x < speedThreshold) {
        this.velocity.x = speedThreshold;
      }
    }
    if (this.velocity.y < 0) {
      this.directionY = 'up';
      if (this.velocity.y > -speedThreshold) {
        this.velocity.y = -speedThreshold;
      }
    } else {
      this.directionY = 'down';
      if (this.velocity.y < speedThreshold) {
        this.velocity.y = speedThreshold;
      }
    }
    return this;
  };

  Ball.prototype.detectCollisionWithPaddle = function() {
    var ballY, collision, paddleY;
    if (this.directionX === 'left' && this.position.x <= playerOne.position.x + playerOne.width) {
      ballY = this.position.y;
      paddleY = playerOne.position.y;
      if (ballY >= paddleY && ballY <= (paddleY + playerOne.height)) {
        this.directionX = 'right';
        collision = true;
      }
    } else if ((this.position.x + this.size) >= playerTwo.position.x) {
      ballY = this.position.y;
      paddleY = playerTwo.position.y;
      if (ballY >= paddleY && ballY <= (paddleY + playerTwo.height)) {
        this.directionX = 'left';
        collision = true;
      }
    }
    if (collision) {
      this.velocity.x = -(this.velocity.x * 1.05);
    }
    return this;
  };

  Ball.prototype.detectCollisionWithCeilingOrFloor = function() {
    var collision;
    if (this.directionY === 'up' && this.position.y <= 0) {
      this.directionY = 'down';
      collision = true;
    } else if (this.position.y >= canvas.height - this.size) {
      this.directionY = 'up';
      collision = true;
    }
    if (collision) {
      this.velocity.y = -this.velocity.y;
    }
    return this;
  };

  Ball.prototype.draw = function() {
    context.fillStyle = this.color;
    context.fillRect(this.position.x, this.position.y, this.size, this.size);
    return this;
  };

  Ball.prototype.isStillInPlayingField = function() {
    var insideLeft, insideRight;
    insideLeft = this.position.x > -(baseSize * 5);
    insideRight = this.position.x + this.size < canvas.width + (baseSize * 5);
    return insideLeft && insideRight;
  };

  Ball.prototype.update = function() {
    var playerOneWins, playerTwoWins, winner;
    if (this.isStillInPlayingField()) {
      this.detectCollisionWithPaddle();
      this.position.x += calcSpeed(this.velocity.x);
      this.detectCollisionWithCeilingOrFloor();
      this.position.y += calcSpeed(this.velocity.y);
    } else {
      this.updateScoreStates();
      this.constructor();
    }
    playerOneWins = playerOne.score === pointsToWin;
    playerTwoWins = playerTwo.score === pointsToWin;
    if (playerOneWins || playerTwoWins) {
      winner = playerOneWins ? 'One' : 'Two';
      alert("Player " + winner + " Wins!");
      window.cancelAnimationFrame();
    }
    return this;
  };

  Ball.prototype.updateScoreStates = function() {
    var outsideLeft;
    outsideLeft = this.position.x < -(baseSize * 5);
    if (outsideLeft) {
      playerTwo.score += 1;
    } else {
      playerOne.score += 1;
    }
    return this;
  };

  return Ball;

})();

var HeadsUp;

HeadsUp = (function() {
  function HeadsUp() {
    this.netColor = 'rgba(240, 240, 240, 0.25)';
    this.netWidth = Math.round(baseSize / 2);
    if (this.netWidth % 2) {
      this.netWidth += 1;
    }
    this.netLineWidth = Math.round(this.netWidth / 4);
    if (this.netLineWidth % 2) {
      this.netLineWidth += 1;
    }
    this.netX = Math.round((canvas.width / 2) - (this.netWidth / 2));
    this.charPatterns = [[1, 1, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 1, 1]];
    this;
  }

  HeadsUp.prototype.draw = function() {
    this.drawNet();
    this.drawScores();
    return this;
  };

  HeadsUp.prototype.drawNet = function() {
    var netY;
    context.fillStyle = this.netColor;
    context.strokeStyle = this.netColor;
    netY = 0;
    context.lineWidth = this.netLineWidth;
    context.beginPath();
    while (netY < canvas.height) {
      context.moveTo(this.netX, netY + this.netLineWidth);
      context.lineTo(this.netX + this.netWidth, netY + this.netLineWidth);
      netY += this.netLineWidth * 2;
    }
    context.closePath();
    context.fill();
    context.stroke();
    return this;
  };

  HeadsUp.prototype.drawScores = function() {
    var score;
    score = '' + playerOne.score;
    this.drawScoreCharacters(1, score);
    score = '' + playerTwo.score;
    this.drawScoreCharacters(2, score);
    return this;
  };

  HeadsUp.prototype.drawScoreCharacters = function(player, score) {
    var char, charCount, charWidth, i, len, pattern, posX, posY, ref, scoreStartY, startX, startY, unitLong, unitShort;
    charCount = score.length;
    charWidth = baseSize * 4;
    unitLong = baseSize * 3;
    unitShort = baseSize;
    startX = Math.round(canvas.width / 2);
    startY = Math.round(scoreStartY = baseSize * 2);
    if (player === 1) {
      startX -= (baseSize * 2) + (charWidth * charCount) - this.netWidth;
    } else {
      startX += (this.netWidth / 2) + (baseSize * 2);
    }
    startX = Math.round(startX);
    posX = startX;
    posY = startY;
    ref = score.split('');
    for (i = 0, len = ref.length; i < len; i++) {
      char = ref[i];
      char = parseInt(char, 10);
      pattern = this.charPatterns[char];
      context.fillStyle = 'rgba(180, 180, 180, ' + pattern[0] + ')';
      context.fillRect(posX, posY, unitLong, unitShort);
      posY += baseSize * 2;
      context.fillStyle = 'rgba(180, 180, 180, ' + pattern[6] + ')';
      context.fillRect(posX, posY, unitLong, unitShort);
      posY += baseSize * 2;
      context.fillStyle = 'rgba(180, 180, 180, ' + pattern[3] + ')';
      context.fillRect(posX, posY, unitLong, unitShort);
      posX = startX;
      posY = startY;
      context.fillStyle = 'rgba(180, 180, 180, ' + pattern[5] + ')';
      context.fillRect(posX, posY, unitShort, unitLong);
      posY += baseSize * 2;
      context.fillStyle = 'rgba(180, 180, 180, ' + pattern[4] + ')';
      context.fillRect(posX, posY, unitShort, unitLong);
      posX = startX + baseSize * 2;
      posY = startY;
      context.fillStyle = 'rgba(180, 180, 180, ' + pattern[1] + ')';
      context.fillRect(posX, posY, unitShort, unitLong);
      posY += baseSize * 2;
      context.fillStyle = 'rgba(180, 180, 180, ' + pattern[2] + ')';
      context.fillRect(posX, posY, unitShort, unitLong);
      startX += charWidth;
      posX = startX;
      posY = startY;
    }
    return this;
  };

  return HeadsUp;

})();

var Player;

Player = (function() {
  function Player(playerNumber) {
    this.playerNumber = playerNumber;
    this.color = 'rgb(240, 240, 240)';
    this.direction = false;
    this.score = 0;
    this.height = baseSize * 8;
    this.width = baseSize;
    this.position = {
      x: this.playerNumber === 1 ? 20 : canvas.width - 20 - this.width,
      y: (canvas.height / 2) - (this.height / 2)
    };
    this.animateTo = this.position;
    this.newPositionY = 0.5;
    this.maxPositionY = canvas.height - this.height;
    this.velocity = 30;
    this;
  }

  Player.prototype.draw = function() {
    context.fillStyle = this.color;
    context.fillRect(this.position.x, this.position.y, this.width, this.height);
    return this;
  };

  Player.prototype.update = function() {
    this.position.y = this.maxPositionY * this.newPositionY;
    return this;
  };

  return Player;

})();

var animationLoop, ball, baseSize, canvas, canvasHelper, context, delta, fpsOutput, headsUp, lastTime, playerOne, playerTwo, pointsToWin;

delta = 0;

fpsOutput = document.querySelector('.fps');

lastTime = 0;

pointsToWin = 15;

canvasHelper = new CanvasHelper();

canvas = canvasHelper.element;

context = canvasHelper.context;

baseSize = Math.round(canvas.height * 0.015);

if (baseSize % 2) {
  baseSize += 1;
}

ball = new Ball();

playerOne = new Player(1);

playerTwo = new Player(2);

headsUp = new HeadsUp();

navigator.requestMIDIAccess().then(function(midiAccess) {
  var input;
  input = midiAccess.inputs.values().next();
  return input.value.onmidimessage = function(event) {
    var control, paddle, value;
    console.log(event.data);
    control = event.data[1];
    if (control != null) {
      value = event.data[2];
      console.log(control, value);
      if (control === 3 || control === 14) {
        paddle = playerOne;
      }
      if (control === 11 || control === 22) {
        paddle = playerTwo;
      }
      if (paddle) {
        value /= 128;
        return paddle.newPositionY = -(value - 1);
      }
    }
  };
});

animationLoop = (function(_this) {
  return function(now) {
    var fps;
    delta = now - lastTime;
    fps = Math.round(1000 / delta);
    lastTime = now;
    fpsOutput.innerHTML = fps;
    canvas.width = canvas.width;
    ball.draw();
    playerOne.draw();
    playerTwo.draw();
    headsUp.draw();
    ball.update();
    playerOne.update();
    playerTwo.update();
    return window.requestAnimationFrame(animationLoop);
  };
})(this);

animationLoop();

//# sourceMappingURL=data:application/json;base64,