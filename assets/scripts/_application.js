// Generated by CoffeeScript 1.6.1
'use strict';
/* --------------------------------------------
     Begin _utils.coffee
--------------------------------------------
*/

var Ball, Paddle, animationLoop, animationLoopId, ball, canvas, context, controlCallback, controller, playerOne, playerTwo, random, randomInteger;

random = function(min, max) {
  if (min === void 0) {
    min = 0;
    max = 1;
  } else if (max === void 0) {
    max = min;
    min = 0;
  }
  return (Math.random() * (max - min)) + min;
};

randomInteger = function(min, max) {
  if (max === void 0) {
    max = min;
    min = 0;
  }
  return Math.floor(Math.random() * (max + 1 - min)) + min;
};

/* --------------------------------------------
     Begin Ball.coffee
--------------------------------------------
*/


Ball = (function() {

  function Ball() {}

  Ball.prototype.init = function() {
    var self;
    self = this;
    this.color = 'rgb(240, 240, 240)';
    this.size = 20;
    this.half = this.size / 2;
    this.position = {
      x: canvas.width / 2,
      y: canvas.height / 2
    };
    this.minVelocity = 10;
    this.maxVelocity = 20;
    this.velocity = {
      x: 3,
      y: 4
    };
    this.directionX = 'right';
    this.directionY = 'down';
    return this;
  };

  Ball.prototype.detectCollisionWithPaddle = function() {
    var ballY, collision, paddleY;
    if (this.directionX === 'left' && this.position.x <= playerOne.position.x + playerOne.width) {
      ballY = this.position.y;
      paddleY = playerOne.position.y;
      if (ballY >= paddleY && ballY <= (paddleY + playerOne.height)) {
        this.directionX = 'right';
        collision = true;
      }
    } else if ((this.position.x + this.size) >= playerTwo.position.x) {
      ballY = this.position.y;
      paddleY = playerTwo.position.y;
      if (ballY >= paddleY && ballY <= (paddleY + playerTwo.height)) {
        this.directionX = 'left';
        collision = true;
      }
    }
    if (collision) {
      this.velocity.x = -this.velocity.x;
      this.velocity.x *= 1.05;
    }
    return this;
  };

  Ball.prototype.detectCollisionWithCeilingOrFloor = function() {
    var collision;
    if (this.directionY === 'up' && this.position.y <= 0) {
      this.directionY = 'down';
      collision = true;
    } else if (this.position.y >= canvas.height - this.size) {
      this.directionY = 'up';
      collision = true;
    }
    if (collision) {
      this.velocity.y = -this.velocity.y;
    }
    return this;
  };

  Ball.prototype.draw = function() {
    context.fillStyle = this.color;
    context.fillRect(this.position.x, this.position.y, this.size, this.size);
    return this;
  };

  Ball.prototype.update = function() {
    this.detectCollisionWithPaddle();
    this.position.x += this.velocity.x;
    this.detectCollisionWithCeilingOrFloor();
    this.position.y += this.velocity.y;
    if (this.position.x < 0 - this.half || this.position.x >= canvas.width + this.half) {
      console.log('GAME OVER');
      window.cancelAnimationFrame(animationLoopId);
    }
    this.draw();
    return this;
  };

  return Ball;

})();

/* --------------------------------------------
     Begin Paddle.coffee
--------------------------------------------
*/


Paddle = (function() {

  function Paddle() {}

  Paddle.prototype.init = function(player) {
    var self;
    self = this;
    this.player = player;
    this.color = 'rgb(240, 240, 240)';
    this.direction = false;
    this.width = 20;
    this.height = 150;
    this.position = {
      x: this.player === 1 ? 20 : canvas.width - 20 - this.width,
      y: (canvas.height / 2) - (this.height / 2)
    };
    this.animateTo = this.position;
    this.newPositionY = 0.5;
    this.maxPositionY = canvas.height - this.height;
    this.velocity = 30;
    return this;
  };

  Paddle.prototype.draw = function() {
    context.fillStyle = this.color;
    context.fillRect(this.position.x, this.position.y, this.width, this.height);
    return this;
  };

  Paddle.prototype.update = function() {
    if (this.player === 1) {
      console.log(this.newPositionY);
    }
    this.position.y = this.maxPositionY * this.newPositionY;
    this.draw();
    return this;
  };

  return Paddle;

})();

/* --------------------------------------------
     Begin _bootstrap.coffee
--------------------------------------------
*/


animationLoopId = null;

animationLoop = function() {
  animationLoopId = window.requestAnimationFrame(animationLoop);
  context.clearRect(0, 0, canvas.width, canvas.height);
  playerOne.update();
  playerTwo.update();
  ball.update();
};

controlCallback = function(t, a, controlIndex, value) {
  var paddle;
  value /= 128;
  if (controlIndex === 3 || controlIndex === 14) {
    paddle = playerOne;
  }
  if (controlIndex === 11 || controlIndex === 22) {
    paddle = playerTwo;
  }
  paddle.newPositionY = -(value - 1);
};

document.getElementById('Jazz').MidiInOpen(0, controlCallback);

controller = new Option(' ', ' ', true, true);

canvas = document.createElement('canvas');

context = canvas.getContext('2d');

document.body.appendChild(canvas);

canvas.width = document.body.clientWidth;

canvas.height = document.body.clientHeight;

ball = new Ball();

ball.init();

playerOne = new Paddle();

playerOne.init(1);

playerTwo = new Paddle();

playerTwo.init(2);

animationLoop();
