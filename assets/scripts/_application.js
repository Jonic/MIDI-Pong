// Generated by CoffeeScript 1.6.1
'use strict';
/* --------------------------------------------
     Begin Ball.coffee
--------------------------------------------
*/

var Ball, HeadsUp, Player, animationLoop, animationLoopId, ball, baseSize, calcSpeed, canvas, context, controlCallback, controller, delta, fpsOutput, headsUp, lastTime, playerOne, playerTwo, random, randomInteger;

Ball = (function() {

  function Ball() {}

  Ball.prototype.init = function() {
    var self;
    self = this;
    this.color = 'rgb(240, 240, 240)';
    this.size = baseSize;
    this.half = this.size / 2;
    this.position = {
      x: (canvas.width / 2) - this.half,
      y: (canvas.height / 2) - this.half
    };
    this.minVelocity = 10;
    this.maxVelocity = 20;
    this.velocity = {
      x: Math.random() * 5 - 10,
      y: Math.random() * 5 - 10
    };
    this.directionX = this.velocity.x < 0 ? 'left' : 'right';
    this.directionY = this.velocity.y < 0 ? 'up' : 'down';
    return this;
  };

  Ball.prototype.detectCollisionWithPaddle = function() {
    var ballY, collision, paddleY;
    if (this.directionX === 'left' && this.position.x <= playerOne.position.x + playerOne.width) {
      ballY = this.position.y;
      paddleY = playerOne.position.y;
      if (ballY >= paddleY && ballY <= (paddleY + playerOne.height)) {
        this.directionX = 'right';
        collision = true;
      }
    } else if ((this.position.x + this.size) >= playerTwo.position.x) {
      ballY = this.position.y;
      paddleY = playerTwo.position.y;
      if (ballY >= paddleY && ballY <= (paddleY + playerTwo.height)) {
        this.directionX = 'left';
        collision = true;
      }
    }
    if (collision) {
      this.velocity.x = -(this.velocity.x * 1.05);
    }
    return this;
  };

  Ball.prototype.detectCollisionWithCeilingOrFloor = function() {
    var collision;
    if (this.directionY === 'up' && this.position.y <= 0) {
      this.directionY = 'down';
      collision = true;
    } else if (this.position.y >= canvas.height - this.size) {
      this.directionY = 'up';
      collision = true;
    }
    if (collision) {
      this.velocity.y = -this.velocity.y;
    }
    return this;
  };

  Ball.prototype.draw = function() {
    context.fillStyle = this.color;
    context.fillRect(this.position.x, this.position.y, this.size, this.size);
    return this;
  };

  Ball.prototype.isStillInPlayingField = function() {
    var insideLeft, insideRight;
    insideLeft = this.position.x > -(baseSize * 5);
    insideRight = this.position.x + this.size < canvas.width + (baseSize * 5);
    return insideLeft && insideRight;
  };

  Ball.prototype.update = function() {
    if (this.isStillInPlayingField()) {
      this.detectCollisionWithPaddle();
      this.position.x += calcSpeed(this.velocity.x);
      this.detectCollisionWithCeilingOrFloor();
      this.position.y += calcSpeed(this.velocity.y);
    } else {
      console.log('GAME OVER');
      window.cancelAnimationFrame(animationLoopId);
    }
    return this;
  };

  return Ball;

})();

/* --------------------------------------------
     Begin HeadsUp.coffee
--------------------------------------------
*/


HeadsUp = (function() {

  function HeadsUp() {}

  HeadsUp.prototype.init = function() {
    this.netColor = 'rgba(240, 240, 240, 0.25)';
    this.netWidth = Math.round(baseSize / 2);
    this.netLineWidth = Math.round(this.netWidth / 3);
    this.netX = (canvas.width / 2) - (this.netWidth / 2);
    return this;
  };

  HeadsUp.prototype.draw = function() {
    this.drawNet();
    this.drawScore();
    return this;
  };

  HeadsUp.prototype.drawNet = function() {
    var netY;
    context.fillStyle = this.netColor;
    context.strokeStyle = this.netColor;
    netY = 0;
    context.lineWidth = this.netLineWidth;
    context.beginPath();
    while (netY < canvas.height) {
      context.moveTo(this.netX, netY + this.netLineWidth);
      context.lineTo(this.netX + this.netWidth, netY + this.netLineWidth);
      netY += this.netLineWidth * 2;
    }
    context.closePath();
    context.fill();
    return context.stroke();
  };

  HeadsUp.prototype.drawScore = function() {
    return this;
  };

  HeadsUp.prototype.update = function() {
    return this;
  };

  return HeadsUp;

})();

/* --------------------------------------------
     Begin Player.coffee
--------------------------------------------
*/


Player = (function() {

  function Player() {}

  Player.prototype.init = function(playerNumber) {
    var self;
    self = this;
    this.playerNumber = playerNumber;
    this.color = 'rgb(240, 240, 240)';
    this.direction = false;
    this.score = 0;
    this.height = baseSize * 8;
    this.width = baseSize;
    this.position = {
      x: this.playerNumber === 1 ? 20 : canvas.width - 20 - this.width,
      y: (canvas.height / 2) - (this.height / 2)
    };
    this.animateTo = this.position;
    this.newPositionY = 0.5;
    this.maxPositionY = canvas.height - this.height;
    this.velocity = 30;
    return this;
  };

  Player.prototype.draw = function() {
    context.fillStyle = this.color;
    context.fillRect(this.position.x, this.position.y, this.width, this.height);
    return this;
  };

  Player.prototype.update = function() {
    if (this.player === 1) {
      console.log(this.newPositionY);
    }
    this.position.y = this.maxPositionY * this.newPositionY;
    return this;
  };

  return Player;

})();

/* --------------------------------------------
     Begin _utils.coffee
--------------------------------------------
*/


random = function(min, max) {
  if (min === void 0) {
    min = 0;
    max = 1;
  } else if (max === void 0) {
    max = min;
    min = 0;
  }
  return (Math.random() * (max - min)) + min;
};

randomInteger = function(min, max) {
  if (max === void 0) {
    max = min;
    min = 0;
  }
  return Math.floor(Math.random() * (max + 1 - min)) + min;
};

/* --------------------------------------------
     Begin _bootstrap.coffee
--------------------------------------------
*/


delta = 0;

fpsOutput = document.querySelector('.fps');

lastTime = 0;

animationLoop = function(now) {
  var fps;
  delta = now - lastTime;
  lastTime = now;
  fps = Math.round(1000 / delta);
  fpsOutput.innerHTML = fps;
  canvas.width = canvas.width;
  ball.draw();
  headsUp.draw();
  playerOne.draw();
  playerTwo.draw();
  ball.update();
  headsUp.update();
  playerOne.update();
  playerTwo.update();
  window.requestAnimationFrame(animationLoop);
};

calcSpeed = function(speed) {
  return (speed * delta) * (60 / 1000);
};

controlCallback = function(t, a, controlIndex, value) {
  var paddle;
  if (controlIndex === 3 || controlIndex === 14) {
    paddle = playerOne;
  }
  if (controlIndex === 11 || controlIndex === 22) {
    paddle = playerTwo;
  }
  if (paddle) {
    value /= 128;
    paddle.newPositionY = -(value - 1);
  }
};

document.getElementById('Jazz').MidiInOpen(0, controlCallback);

controller = new Option(' ', ' ', true, true);

canvas = document.createElement('canvas');

context = canvas.getContext('2d');

document.body.appendChild(canvas);

canvas.width = document.body.clientWidth;

canvas.height = document.body.clientHeight;

baseSize = Math.round(canvas.height * 0.015);

ball = new Ball();

ball.init();

playerOne = new Player();

playerOne.init(1);

playerTwo = new Player();

playerTwo.init(2);

headsUp = new HeadsUp();

headsUp.init();

animationLoopId = window.requestAnimationFrame(animationLoop);
